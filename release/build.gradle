/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Gradle script used to perform DM releases (really similar to Apache ACE build.xml)
 */
import aQute.bnd.build.Workspace

// Misc properties (you must update the ext.dmVersion property before each release)
ext.svnStagingPath = "https://dist.apache.org/repos/dist/dev/felix"
ext.svnReleasePath = "https://dist.apache.org/repos/dist/release/felix"
ext.dmVersion = "4.0.0"

apply plugin: 'java'
apply from: file("rat.gradle")

// Add bnd as a build dependency
buildscript {
    dependencies {
        classpath files('cnf/gradle/biz.aQute.bnd.gradle.jar')
    }
}

// Configure RAT plugin to ignore some files
rat {
  excludes = [
    'rat-report.xml',
    '**/.git/**',
    '**/.gradle/**',
    '**/.project',
    '**/.settings',
    '**/*.iml',
    '**/*.iws',
    '**/*.ipr',
    '**/.classpath',
    'cnf/**',
    'gradle/wrapper/**',
    'release/**',
    'gradlew',
    'README',
    '**/README',
    '**/.gitignore',
    '**/generated/**',
    'doc/**',
    '**/*.bnd',
    '**/packageinfo',
    '**/*.txt'
  ]
}

// Setup the workspace
Workspace workspace
workspace = Workspace.getWorkspace(".")

task makeStaging << {
    description = 'Package the source and binary distributions.'

    // Package source and binary distributions.
    new File('.').eachFile { 
	if(new File(it, 'bnd.bnd').exists()) {
	    def bndProject = workspace.getProject(it.name)
	    if (! bndProject.getProperty("Test-Cases") && ! bndProject.isNoBundles()) {
		logger.lifecycle("    Packaging source for project ${bndProject.name}")

		// Package source distribution
		ant.zip(destfile: "staging/${bndProject.name}-" + bndProject.getVersion("${bndProject.name}") + "-src.zip") {
		    zipfileset(dir: '../cnf', prefix: "dependencymanager/cnf", includes: '.project,.classpath,src/**,*.bnd,ext/**')
		    zipfileset(dir: '..', prefix: "dependencymanager", includes: '*.gradle,*.properties')
		    zipfileset(dir: "../${bndProject.name}", 
			       prefix: "dependencymanager/" + "${bndProject.name}",
			       includes: "*.gradle,.project,.classpath,.settings/**,src/**,test/**,resources/**,*.bnd,*.bndrun,run-*/conf/**")
		}

		// Package binary distribution
		logger.lifecycle("    Packaging binary distributions.")
		ant.zip(destfile: "staging/${bndProject.name}-" + bndProject.getVersion("${bndProject.name}") + "-bin.zip") {
		    ant.zipfileset(dir: '../cnf', prefix: 'dependencymanager/cnf', 
				   includes: 'buildrepo/**,localrepo/**,releaserepo/**,plugins/**,gradle/**')
		}
	    }
	}
    }
}

// Sign staging directory 
task signStaging << { 
    fileTree("staging").visit { FileVisitDetails details -> 
	logger.lifecycle("    Signing " + details.file.path)
	ant.exec(executable: 'gpg', dir: 'staging') { 
	    ant.arg(line: '--armor')
	    ant.arg(line: '--output')
	    ant.arg(line: details.file.name + ".asc")
	    ant.arg(line: "--detach-sig")
	    ant.arg(line: details.file.name)
	}

	ant.exec(executable: 'gpg', dir: 'staging', output: "staging/" + details.file.name + ".md5") { 
	    ant.arg(line: '--print-md')
	    ant.arg(line: 'MD5')
	    ant.arg(line: details.file.name)
	}

	ant.exec(executable: 'gpg', dir: 'staging', output: "staging/" + details.file.name + ".sha") {
	    ant.arg(line: '--print-md')
	    ant.arg(line: 'SHA512')
	    ant.arg(line: details.file.name)
	}
    }
}


// Moves the source and binary distributions to staging.
// (you must provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task commitToStaging << {
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
	'import', 'staging', svnStagingPath + "/apache-felix-dependencymanager-" + dmVersion + "/", 
	'-m', "Staging Apache Felix Dependency Manager version " + dmVersion + "."
    }
}

// Promotes the staged distributions to release
// (you must provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task promoteToRelease << { 
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
	'move', svnStagingPath+"/apache-felix-dependencymanager-" + dmVersion , svnReleasePath, 
	'-m', "Releasing Apache Felix Dependency Manager version " + dmVersion + "."
    }
}

// Removes the staged distributions from staging
// (you must provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task deleteFromStaging << { 
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
	'delete', svnStagingPath+"/apache-felix-dependencymanager-" + dmVersion + "/",
	"-m", "Removing Apache Felix Dependency Manager version " + dmVersion + " from staging."
    }
}

// Clean staging directory
task clean(overwrite: true) << { 
    new File("release/staging").deleteDir()
    new File("rat-report.xml").delete()
}

// Only clean the staging directory
task cleanStaging << { 
    new File("release/staging").deleteDir()
}

//Generate a Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
