/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Gradle script used to perform DM releases (really similar to Apache ACE build.xml)
 */
import aQute.bnd.build.Workspace

// Our release number, which has to be monotonically incremented each time we make a new release.
ext.dmRelease = "r1"

// Our Apache svn Staging repo
ext.svnStagingPath = "https://dist.apache.org/repos/dist/dev/felix"

// Our Apache svn Release repo
ext.svnReleasePath = "https://dist.apache.org/repos/dist/release/felix"

apply plugin: 'java'
apply from: file("rat.gradle")

// Add bnd as a build dependency
buildscript {
    dependencies {
        classpath files('cnf/gradle/biz.aQute.bnd.gradle.jar')
    }
}

// Configure RAT plugin to ignore some files
rat {
  excludes = [
    'rat-report.xml',
    '**/.git/**',
    '**/.gradle/**',
    '**/.project',
    '**/.settings',
    '**/*.iml',
    '**/*.iws',
    '**/*.ipr',
    '**/.classpath',
    'cnf/**',
    'gradle/wrapper/**',
    'release/**',
    'gradlew',
    'README',
    '**/DEPENDENCIES',
    '**/README',
    '**/.gitignore',
    '**/generated/**',
    'doc/**',
    '**/packageinfo',
    '**/*.txt',
    'docs/**',
    '.metadata/**'
  ]
}

// Setup the workspace
Workspace workspace
workspace = Workspace.getWorkspace(".")

task makeStaging << {
    description = 'Package the source and binary distributions.'

    // Package source and source bin dependencies distributions.
    logger.lifecycle("    Packaging source distributions.")
    def topdir="apache-felix-dependencymanager-" + dmRelease
    ant.zip(destfile: "staging/"+topdir+'-src.zip') {
		zipfileset(dir: '../cnf', prefix: topdir+"-src/cnf", includes: ".project,.classpath,src/**,*.bnd,ext/**")
		zipfileset(dir: '..', prefix: topdir+"-src", includes: '*.gradle,*.properties')
		zipfileset(dir: 'resources/src', prefix: topdir+"-src", includes: '*')
		new File('.').eachFile { 
	    	if(new File(it, 'bnd.bnd').exists()) {
    			def bndProject = workspace.getProject(it.name)
    			if (! bndProject.isNoBundles()) {
    		    	zipfileset(dir: "../${bndProject.name}", prefix: topdir+"-src/${bndProject.name}",
    			       		   includes: "*.gradle,.project,.classpath,.settings/**,src/**,test/**,*.bnd,*.bndrun,run-*/conf/**,resources/**")
    			}
	   		}
		}
    }

    // Package binary dependencies, needed to build the source distributions.
    logger.lifecycle("    Packaging binary dependencies.")    
    ant.zip(destfile: "staging/"+topdir+"-deps.zip") {
		ant.zipfileset(dir: 'resources/deps', prefix: topdir+"-deps", includes: '*')
		ant.zipfileset(dir: '../cnf', prefix: topdir+"-deps/cnf",
		    		   includes: 'buildrepo/**,localrepo/**,releaserepo/**,plugins/**,gradle/**')
    }

    // Package binaries as a simple collection of bundles. We use same license files as for src distrib.
    logger.lifecycle("    Packaging binary distribution.")    
    ant.zip(destfile: "staging/"+topdir+"-bin.zip") {
        ant.mappedresources() {
        	ant.fileset(dir: '..', includes: '*/generated/*.jar', excludes: '*.itest/generated/*.jar')
            ant.chainedmapper() {
                ant.flattenmapper()
                ant.globmapper(from: '*', to: topdir+'-bin/*')
            }
        }
        ant.mappedresources() {
        	ant.fileset(dir: 'resources/bin', includes: '*')
            ant.chainedmapper() {
                ant.flattenmapper()
                ant.globmapper(from: '*', to: topdir+'-bin/*')
            }
        }
    }
}

// Sign staging directory 
task signStaging << { 
    fileTree("staging").visit { FileVisitDetails details -> 
		logger.lifecycle("    Signing " + details.file.path)
		ant.exec(executable: 'gpg', dir: 'staging') { 
	    	ant.arg(line: '--armor')
	    	ant.arg(line: '--output')
	    	ant.arg(line: details.file.name + ".asc")
	    	ant.arg(line: "--detach-sig")
	    	ant.arg(line: details.file.name)
		}

		ant.exec(executable: 'gpg', dir: 'staging', output: "staging/" + details.file.name + ".md5") { 
	    	ant.arg(line: '--print-md')
	    	ant.arg(line: 'MD5')
	    	ant.arg(line: details.file.name)
		}

		ant.exec(executable: 'gpg', dir: 'staging', output: "staging/" + details.file.name + ".sha") {
	    	ant.arg(line: '--print-md')
	    	ant.arg(line: 'SHA512')
	    	ant.arg(line: details.file.name)
		}
    }
}


// Moves the source and binary distributions to staging.
// (you can provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task commitToStaging << {
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
		'import', 'staging', svnStagingPath + "/apache-felix-dependencymanager-" + dmRelease + "/", 
		'-m', "Staging Apache Felix Dependency Manager version " + dmRelease + "."
    }
}

// Promotes the staged distributions to release
// (you can provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task promoteToRelease << { 
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
		'move', svnStagingPath+"/apache-felix-dependencymanager-" + dmRelease , svnReleasePath, 
		'-m', "Releasing Apache Felix Dependency Manager version " + dmRelease + "."
    }
}

// Removes the staged distributions from staging
// (you can provide svn user/password using gradle "-PsvnUser=xxx -PsvnPassword=xxx" options)
task deleteFromStaging << { 
    getProject().exec { 
    	commandLine 'svn', '--username', svnUser, '--password', svnPassword, 
		'delete', svnStagingPath+"/apache-felix-dependencymanager-" + dmRelease + "/",
		"-m", "Removing Apache Felix Dependency Manager version " + dmRelease + " from staging."
    }
}

// Clean staging directory
task clean(overwrite: true) << { 
    new File("release/staging").deleteDir()
    new File("rat-report.xml").delete()
}

// Only clean the staging directory
task cleanStaging << { 
    new File("release/staging").deleteDir()
}
