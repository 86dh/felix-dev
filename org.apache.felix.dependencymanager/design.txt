7 feb 2014 (marrs & uiterlix):

This prototype demonstrates the new concurrency principles that form the basis for the DM:

 * All external events that influence the state of dependencies are recorded and given 
   to the serial executor of the component. We record whatever data comes in, so when the
   actual job is run by the serial executor, we still have access to the original data
   without having to access other sources whose state might have changed since.
 * The serial executor of a component will execute a job immediately if it is being called
   by the thread that is already executing jobs.
 * If the serial executor of a component had not yet started a job, it will queue and start
   it on the current thread.
 * If the serial executor gets invoked from a different thread than the one currently
   executing jobs, the job will be put at the end of the queue. As mentioned before, any
   data associated with the event will also be recorded so it is available when the job
   executes.
 * State in the component and dependency can only be modified via the serial executor
   thread. This means we don't need explicit synchronization anywhere.

20 sept 2014 (pderop):

 * Added support for concurrent mode: you can now register in the OSGi service registry a
   threadpool (java.util.concurrent.Executor) service using the
   "target=org.apache.felix.dependencymanager" service property, and using the
   "org.apache.felix.dependencymanager.parallel=true system property". This will allow to handle all
   component dependencies and all component lifecycle callbacks concurrently. Notice that component
   events are still handled serially. The only difference is that multiple components can be handled
   in parallel. See the
   org.apache.felix.dependencymanager/src/org/apache/felix/dm/impl/DispatchExecutor.java for for
   informations.


