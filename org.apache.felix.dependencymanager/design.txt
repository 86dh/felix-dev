7 feb 2014 (marrs & uiterlix):

This prototype demonstrates the new concurrency principles that form the basis for the DM:

 * All external events that influence the state of dependencies are recorded and given 
   to the serial executor of the component. We record whatever data comes in, so when the
   actual job is run by the serial executor, we still have access to the original data
   without having to access other sources whose state might have changed since.
 * The serial executor of a component will execute a job immediately if it is being called
   by the thread that is already executing jobs.
 * If the serial executor of a component had not yet started a job, it will queue and start
   it on the current thread.
 * If the serial executor gets invoked from a different thread than the one currently
   executing jobs, the job will be put at the end of the queue. As mentioned before, any
   data associated with the event will also be recorded so it is available when the job
   executes.
 * State in the component and dependency can only be modified via the serial executor
   thread. This means we don't need explicit synchronization anywhere.

20 sept 2014 (pderop):

 * Added support for concurrent mode: To allow components to be handled in parallel, you can now
   register in the OSGi service registry a threadpool (java.util.concurrent.Executor) service with
   a "target=org.apache.felix.dependencymanager" service property. Then, the dependency manager will
   use that threadpool for managing components. If you want to ensure that the threadpool is
   registered in the OSGi registry before all components are started, you have two choices:

- you can first use the start level service and manage to start the management agent bundle which
  provides the threadpool before all other bundles.

- If the start level service is not an option, then you can use the
  "org.apache.felix.dependencymanager.parallel" OSGi system property. This property allows
  to specify all component implementation class name prefixes which have to wait for the thread pool
  before being started by Dependency Manager. This property can simply take "*", or a list of
  package prefixes (comma separated). This property can also be used to specify some components
  which should not be handled using a threadpool, even if one is available from the OSGi
  registry. To do so, just use a "!" in front of a given classname prefix.

For example: if you want to enable parallelism for all components, just set the system property:

     org.apache.felix.dependencymanager.parallel=*

if you want to enable parallelism for some components whose class names is starting with foo.bar
  and foo.zoo:

      org.apache.felix.dependencymanager.parallel=foo.bar, foo.zoo

if yo want to enable parallelism for all components, except for components whose class names
  start with "foo.notparallel", then you can use a negation prefix ("!"), like this:

      org.apache.felix.dependencymanager.parallel=!foo.notparallel, *

Using the above property, all components will wait for the threadpool, except components which
implementation class names which are starting with "foo.notparallel" prefix.

- Notice that if the Dependency Manager API is used for declaring a threadpool and all its related
  dependent services, then you have to use the "org.apache.felix.dependencymanager.parallel" system
  property in order to exclude the threadpool DM components from the list of components using the
  threadpool. As an example, you can take a look at the org.apache.felix.dependencymanager.samples
  project, which is declaring a threadpool using the Dependency Manager API. The sample is then
  using the following property in the org.apache.felix.dependencymanager.samples/bnd.bnd file:

	org.apache.felix.dependencymanager.parallel=\
		'!org.apache.felix.dependencymanager.samples.tpool, *',\

Here, all components except those having a package starting with
org.apache.felix.dependencymanager.samples.tpool will wait for the threadpool before being initialized 
by Dependency Manager. But the org.apache.felix.dependencymanager.samples.tpool.ThreadPool will not
wait for a threadpool, since *it is* the threadpool !












